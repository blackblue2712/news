// eslint-disable-next-line unicorn/prefer-module
module.exports = {
  root: true,
  parser: "@typescript-eslint/parser", // Specifies the ESLint parser
  plugins: [
    "@typescript-eslint",
    "unicorn",
    "import",
    "jsx-a11y",
    "@ts-gql",
    "more",
    "react",
  ],
  extends: [
    "airbnb-typescript",
    "plugin:@typescript-eslint/recommended",
    "plugin:unicorn/recommended",
    "plugin:import/errors",
    "plugin:import/warnings",
    "plugin:import/typescript",
    "plugin:jsx-a11y/recommended",
    "prettier",
  ],
  parserOptions: {
    ecmaVersion: 2018, // Allows for the parsing of modern ECMAScript features
    sourceType: "module", // Allows for the use of imports
    project: "./tsconfig.eslint.json",
  },
  env: {
    es6: true,
    browser: true,
    node: true,
  },
  ignorePatterns: [".eslintrc.js"],
  rules: {
    "@ts-gql/ts-gql": "error",
    "@typescript-eslint/no-empty-function": "warn",
    "jsx-a11y/click-events-have-key-events": "warn",
    "jsx-a11y/no-static-element-interactions": "warn",
    "unicorn/no-reduce": "warn",
    "react/require-default-props": "warn",
    "jsx-a11y/anchor-is-valid": "warn",
    "jsx-a11y/anchor-has-content": "warn",
    "react/jsx-indent": "warn",
    "unicorn/no-nested-ternary": "off",
    "react/jsx-curly-newline": "off",
    "react/jsx-indent-props": "warn",
    "no-restricted-globals": "warn",
    "no-shadow": "off",
    "@typescript-eslint/no-shadow": "warn",
    "no-underscore-dangle": "warn",
    "react/prop-types": "warn",
    "unicorn/no-null": "off",
    "unicorn/prevent-abbreviations": "off",
    "class-methods-use-this": "warn",
    "no-return-await": "off",
    "no-unused-expressions": "warn",
    "consistent-return": "warn",
    "no-prototype-builtins": "warn",
    "no-useless-constructor": "off",
    "react/jsx-props-no-spreading": "off",
    "@typescript-eslint/no-inferrable-types": "off",
    "@typescript-eslint/lines-between-class-members": "off",
    "@typescript-eslint/no-useless-constructor": "warn",
    "@typescript-eslint/ban-types": "warn",
    "@typescript-eslint/no-namespace": "off",
    "@typescript-eslint/no-unused-vars": ["error"],
    "@typescript-eslint/dot-notation": "warn",
    "import/no-cycle": "off",
    "import/no-extraneous-dependencies": "warn",
    "import/prefer-default-export": "off",
    "import/no-default-export": "warn",
    "import/no-webpack-loader-syntax": "off",
    "import/no-unresolved": "warn",
    "import/extensions": "off",
    "no-plusplus": ["error", { allowForLoopAfterthoughts: true }],
    "unicorn/prefer-node-remove": "warn",
    "global-require": "off",
    "react/jsx-fragments": "warn",
    "unicorn/no-process-exit": "warn",
    "react/destructuring-assignment": ["error", "never"],
    "react/jsx-one-expression-per-line": "off",
    "no-unused-vars": "warn",
    "unicorn/prefer-includes": "warn",
    "unicorn/better-regex": "warn",
    "unicorn/prefer-string-slice": "warn",
    "unicorn/prefer-add-event-listener": "warn",
    "unicorn/prefer-module": "off",
    "unicorn/consistent-destructuring": "warn",
    "unicorn/explicit-length-check": "off",
    "no-useless-escape": "warn",
    "dot-notation": "warn",
    "unicorn/numeric-separators-style": "off",
    "react/no-unescaped-entities": "warn",

    "no-restricted-syntax": [
      "error",
      {
        selector: "ForInStatement",
        message:
          "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array.",
      },
      {
        selector: "LabeledStatement",
        message:
          "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand.",
      },
      {
        selector: "WithStatement",
        message:
          "`with` is disallowed in strict mode because it makes code impossible to predict and optimize.",
      },
    ],
    "jsx-a11y/no-interactive-element-to-noninteractive-role": [
      "error",
      {
        tr: ["none", "presentation"],
      },
    ],
    "jsx-a11y/no-noninteractive-element-interactions": [
      "error",
      {
        handlers: [
          "onClick",
          "onMouseDown",
          "onMouseUp",
          "onKeyPress",
          "onKeyDown",
          "onKeyUp",
        ],
      },
    ],
    "jsx-a11y/no-noninteractive-element-to-interactive-role": [
      "error",
      {
        ul: [
          "listbox",
          "menu",
          "menubar",
          "radiogroup",
          "tablist",
          "tree",
          "treegrid",
        ],
        ol: [
          "listbox",
          "menu",
          "menubar",
          "radiogroup",
          "tablist",
          "tree",
          "treegrid",
        ],
        li: ["menuitem", "option", "row", "tab", "treeitem"],
        table: ["grid"],
        td: ["gridcell"],
      },
    ],
    "jsx-a11y/no-noninteractive-tabindex": [
      "error",
      {
        tags: [],
        roles: ["tabpanel"],
      },
    ],
    "@typescript-eslint/no-unused-expressions": [
      "error",
      {
        allowShortCircuit: true,
        allowTernary: true,
      },
    ],
    "unicorn/consistent-destructuring": "off",
    "unicorn/filename-case": [
      "error",
      {
        cases: {
          camelCase: true,
          pascalCase: true,
        },
      },
    ],
    "prefer-destructuring": ["warn", { array: false, object: true }],
    "more/no-then": "warn",
    "react/jsx-indent": [2, 2],
    "react/jsx-curly-newline": [2, { multiline: "consistent", singleline: "consistent" }],
    "react/jsx-indent-props": [2, { indentMode: 2, ignoreTernaryOperator: true} ],
    "react/prop-types": "warn",
    "react/jsx-fragments": "warn",
    "react/destructuring-assignment": "warn",
    "react/no-unescaped-entities": "warn",
    "react/jsx-filename-extension": "warn",
    "semi": [2, "always"],
    "object-curly-spacing": ["error", "always", { "arraysInObjects": true, "objectsInObjects": true }],
    "no-multiple-empty-lines": ["error", {"max": 1}],
    "space-infix-ops": "off",
    "@typescript-eslint/space-infix-ops": ["error", { "int32Hint": false }]
  },
  
};
